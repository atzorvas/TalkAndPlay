package org.scify.talkandplay.gui.users;

import java.awt.Color;
import java.awt.Font;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.ButtonGroup;
import javax.swing.JFileChooser;
import javax.swing.JTextField;
import javax.swing.border.LineBorder;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.apache.commons.lang3.StringUtils;
import org.scify.talkandplay.gui.MainFrame;
import org.scify.talkandplay.gui.MainPanel;
import org.scify.talkandplay.gui.helpers.GuiHelper;
import org.scify.talkandplay.gui.helpers.UIConstants;
import org.scify.talkandplay.models.User;
import org.scify.talkandplay.models.sensors.KeyboardSensor;
import org.scify.talkandplay.models.sensors.MouseSensor;
import org.scify.talkandplay.models.sensors.Sensor;
import org.scify.talkandplay.services.UserService;

public class UserFormPanel extends javax.swing.JPanel {

    private String userImage;
    private MainFrame parent;
    private UserService userService;
    private GuiHelper guiHelper;
    private User user;
    private Sensor selectionSensor;
    private Sensor navigationSensor;

    public UserFormPanel(MainFrame parent) {
        this.guiHelper = new GuiHelper();
        this.parent = parent;
        this.userService = new UserService();
        this.user = null;
        this.selectionSensor = null;
        this.navigationSensor = null;
        initComponents();
        initCustomComponents();
    }

    public UserFormPanel(MainFrame parent, User user) {
        this.guiHelper = new GuiHelper();
        this.parent = parent;
        this.user = user;
        this.userService = new UserService();
        initComponents();
        initCustomComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        jButton1 = new javax.swing.JButton();
        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        userPanel = new javax.swing.JPanel();
        nameTextField = new javax.swing.JTextField();
        uploadImageLabel = new javax.swing.JLabel();
        rotationSpeedSlider = new javax.swing.JSlider();
        rotationSpeedLabel = new javax.swing.JLabel();
        createUserButton = new javax.swing.JButton();
        errorLabel = new javax.swing.JLabel();
        editUserButton = new javax.swing.JButton();
        backButton = new javax.swing.JButton();
        nameLabel = new javax.swing.JLabel();
        imageLabel = new javax.swing.JLabel();
        sensorLabel = new javax.swing.JLabel();
        defaultGridSizeLabel = new javax.swing.JLabel();
        columnsTextField = new javax.swing.JTextField();
        xLabel = new javax.swing.JLabel();
        rowsTextField = new javax.swing.JTextField();
        tilesLabel = new javax.swing.JLabel();
        soundCheckBox = new javax.swing.JCheckBox();
        textCheckBox = new javax.swing.JCheckBox();
        imageCheckBox = new javax.swing.JCheckBox();
        selectionSensorTextField1 = new javax.swing.JTextField();
        navigationSensorTextField = new javax.swing.JTextField();
        selectionSensorTextField2 = new javax.swing.JTextField();
        autoScanRadioButton = new javax.swing.JRadioButton();
        manualScanRadioButton = new javax.swing.JRadioButton();

        jToolBar1.setRollover(true);

        jButton1.setText("jButton1");

        userPanel.setBackground(new java.awt.Color(255, 255, 255));

        nameTextField.setBackground(new java.awt.Color(255, 255, 255));
        nameTextField.setForeground(new java.awt.Color(51, 51, 51));
        nameTextField.setText("Όνομα χρήστη");

        uploadImageLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        uploadImageLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/scify/talkandplay/resources/no-photo.png"))); // NOI18N
        uploadImageLabel.setToolTipText("");
        uploadImageLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        uploadImageLabel.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        uploadImageLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                uploadImageLabelMouseClicked(evt);
            }
        });

        rotationSpeedSlider.setBackground(new java.awt.Color(255, 255, 255));
        rotationSpeedSlider.setFont(rotationSpeedSlider.getFont());
        rotationSpeedSlider.setForeground(new java.awt.Color(51, 51, 51));
        rotationSpeedSlider.setMajorTickSpacing(1);
        rotationSpeedSlider.setMaximum(10);
        rotationSpeedSlider.setMinimum(1);
        rotationSpeedSlider.setMinorTickSpacing(1);
        rotationSpeedSlider.setPaintLabels(true);
        rotationSpeedSlider.setSnapToTicks(true);
        rotationSpeedSlider.setValue(1);

        rotationSpeedLabel.setText("4. Επίλεξε ταχύτητα εναλλαγής");

        createUserButton.setBackground(new java.awt.Color(75, 161, 69));
        createUserButton.setFont(createUserButton.getFont());
        createUserButton.setForeground(new java.awt.Color(255, 255, 255));
        createUserButton.setText("Πρόσθεσε νέο χρήστη");
        createUserButton.setBorder(null);
        createUserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createUserButtonActionPerformed(evt);
            }
        });

        errorLabel.setFont(errorLabel.getFont());
        errorLabel.setForeground(new java.awt.Color(153, 0, 0));
        errorLabel.setText("error");

        editUserButton.setBackground(new java.awt.Color(75, 161, 69));
        editUserButton.setFont(editUserButton.getFont());
        editUserButton.setForeground(new java.awt.Color(255, 255, 255));
        editUserButton.setText("Αποθήκευση χρήστη");
        editUserButton.setBorder(null);
        editUserButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                editUserButtonMouseClicked(evt);
            }
        });

        backButton.setBackground(new java.awt.Color(75, 161, 69));
        backButton.setFont(backButton.getFont());
        backButton.setForeground(new java.awt.Color(255, 255, 255));
        backButton.setText("Πίσω");
        backButton.setBorder(null);

        nameLabel.setText("1. Γράψε όνομα χρήστη");

        imageLabel.setText("2. Ανέβασε φωτογραφία χρήστη");

        sensorLabel.setText("3. Τρόπος εναλλαγής");

        defaultGridSizeLabel.setText("5. Καθόρισε μέγεθος πίνακα");

        columnsTextField.setText("3");

        xLabel.setText("x");

        rowsTextField.setText("3");

        tilesLabel.setText("6. Εμφάνιση λέξεων");

        soundCheckBox.setBackground(new java.awt.Color(255, 255, 255));
        soundCheckBox.setText("Ήχος");

        textCheckBox.setBackground(new java.awt.Color(255, 255, 255));
        textCheckBox.setText("Λεκτικό");

        imageCheckBox.setBackground(new java.awt.Color(255, 255, 255));
        imageCheckBox.setText("Εικόνα");

        selectionSensorTextField1.setText("Όρισε κουμπί επιλογής");

        navigationSensorTextField.setText("Όρισε κουμπί πλοήγησης");

        selectionSensorTextField2.setText("Όρισε κουμπί επιλογής");

        autoScanRadioButton.setBackground(new java.awt.Color(255, 255, 255));
        autoScanRadioButton.setText("Αυτόματα");

        manualScanRadioButton.setBackground(new java.awt.Color(255, 255, 255));
        manualScanRadioButton.setText("Χειροκίνητα");

        javax.swing.GroupLayout userPanelLayout = new javax.swing.GroupLayout(userPanel);
        userPanel.setLayout(userPanelLayout);
        userPanelLayout.setHorizontalGroup(
            userPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(userPanelLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(userPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(userPanelLayout.createSequentialGroup()
                        .addComponent(nameLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(editUserButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(createUserButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(backButton)
                        .addGap(56, 56, 56))
                    .addGroup(userPanelLayout.createSequentialGroup()
                        .addGroup(userPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(userPanelLayout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(nameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(imageLabel)
                            .addGroup(userPanelLayout.createSequentialGroup()
                                .addGap(49, 49, 49)
                                .addComponent(uploadImageLabel)))
                        .addGap(89, 89, 89)
                        .addGroup(userPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(userPanelLayout.createSequentialGroup()
                                .addGroup(userPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(sensorLabel)
                                    .addGroup(userPanelLayout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addGroup(userPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(manualScanRadioButton)
                                            .addComponent(autoScanRadioButton))))
                                .addGap(54, 54, 54))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, userPanelLayout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addGroup(userPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(navigationSensorTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(selectionSensorTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(selectionSensorTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(128, 128, 128)
                        .addGroup(userPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, userPanelLayout.createSequentialGroup()
                                .addComponent(rotationSpeedSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(26, 26, 26))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, userPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(defaultGridSizeLabel)
                                .addComponent(rotationSpeedLabel)
                                .addGroup(userPanelLayout.createSequentialGroup()
                                    .addGap(6, 6, 6)
                                    .addComponent(soundCheckBox)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(textCheckBox)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(imageCheckBox))
                                .addComponent(tilesLabel))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, userPanelLayout.createSequentialGroup()
                                .addComponent(rowsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(xLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(columnsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(94, 94, 94)))
                        .addGap(0, 115, Short.MAX_VALUE))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, userPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(errorLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        userPanelLayout.setVerticalGroup(
            userPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(userPanelLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(userPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(userPanelLayout.createSequentialGroup()
                        .addComponent(sensorLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(autoScanRadioButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(selectionSensorTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(8, 8, 8)
                        .addComponent(manualScanRadioButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(navigationSensorTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(selectionSensorTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(userPanelLayout.createSequentialGroup()
                        .addGroup(userPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(userPanelLayout.createSequentialGroup()
                                .addComponent(nameLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(nameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(userPanelLayout.createSequentialGroup()
                                .addComponent(rotationSpeedLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(rotationSpeedSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(userPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(userPanelLayout.createSequentialGroup()
                                .addGap(40, 40, 40)
                                .addComponent(imageLabel))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, userPanelLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(defaultGridSizeLabel)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(userPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(uploadImageLabel)
                            .addGroup(userPanelLayout.createSequentialGroup()
                                .addGroup(userPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(xLabel)
                                    .addComponent(columnsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(rowsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(30, 30, 30)
                                .addComponent(tilesLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(userPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(soundCheckBox)
                                    .addComponent(textCheckBox)
                                    .addComponent(imageCheckBox))))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 52, Short.MAX_VALUE)
                .addComponent(errorLabel)
                .addGap(70, 70, 70)
                .addGroup(userPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(createUserButton)
                    .addComponent(editUserButton)
                    .addComponent(backButton)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(userPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(userPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void initCustomComponents() {
        errorLabel.setVisible(false);

        setUI();
        setFocusListeners();
        setActionListeners();

        if (user != null) {
            parent.setPanelTitle("Επεξεργασία χρήστη");

            createUserButton.setVisible(false);
            guiHelper.drawButton(editUserButton);

            nameTextField.setText(user.getName());
            uploadImageLabel.setIcon(guiHelper.getIcon(user.getImage()));
            rotationSpeedSlider.setValue(user.getConfiguration().getRotationSpeed());
            rowsTextField.setText(String.valueOf(user.getConfiguration().getDefaultGridRow()));
            columnsTextField.setText(String.valueOf(user.getConfiguration().getDefaultGridColumn()));
            soundCheckBox.setSelected(user.getConfiguration().hasSound());
            imageCheckBox.setSelected(user.getConfiguration().hasImage());
            textCheckBox.setSelected(user.getConfiguration().hasText());

            selectionSensor = user.getConfiguration().getSelectionSensor();
            navigationSensor = user.getConfiguration().getNavigationSensor();

            //check if auto or manual scanning is set
            if (user.getConfiguration().getNavigationSensor() == null) {
                autoScanRadioButton.setSelected(true);

                enableTextField(selectionSensorTextField1);
                disableTextField(selectionSensorTextField2);
                disableTextField(navigationSensorTextField);

                selectionSensorTextField1.setText(setSensorText(user.getConfiguration().getSelectionSensor()));
            } else {
                manualScanRadioButton.setSelected(true);

                enableTextField(selectionSensorTextField2);
                enableTextField(navigationSensorTextField);
                disableTextField(selectionSensorTextField1);

                selectionSensorTextField2.setText(setSensorText(user.getConfiguration().getSelectionSensor()));
                navigationSensorTextField.setText(setSensorText(user.getConfiguration().getNavigationSensor()));
            }
        } else {
            parent.setPanelTitle("Προσθήκη χρήστη");

            editUserButton.setVisible(false);
            guiHelper.drawButton(createUserButton);

            autoScanRadioButton.setSelected(true);
            enableTextField(selectionSensorTextField1);
            disableTextField(selectionSensorTextField2);
            disableTextField(navigationSensorTextField);
        }

        guiHelper.drawButton(backButton);
    }

    private boolean validateUser() {

        String name = nameTextField.getText();

        //name should not be empty
        if (name.isEmpty() || "Όνομα χρήστη".equals(name)) {
            errorLabel.setText("Το όνομα χρήστη δεν πρέπει να είναι κενό");
            errorLabel.setVisible(true);
            return false;
        }

        //name should be unique
        if (user == null || !name.equals(user.getName())) {
            List<User> users = userService.getUsers();
            for (User user : users) {
                if (user.getName().equals(name)) {
                    errorLabel.setText("Το όνομα χρήστη υπάρχει ήδη");
                    errorLabel.setVisible(true);
                    return false;
                }
            }
        }

        //rows, columns should not be empty, should be integers
        if (rowsTextField.getText().isEmpty() || !StringUtils.isNumeric(rowsTextField.getText())
                || (StringUtils.isNumeric(rowsTextField.getText()) && (Integer.parseInt(rowsTextField.getText()) < 2 || Integer.parseInt(rowsTextField.getText()) > 6))
                || columnsTextField.getText().isEmpty() || !StringUtils.isNumeric(columnsTextField.getText())
                || (StringUtils.isNumeric(columnsTextField.getText()) && (Integer.parseInt(columnsTextField.getText()) < 2 || Integer.parseInt(columnsTextField.getText()) > 6))) {
            errorLabel.setText("Οι κολώνες και οι στήλες του πίνακα πρέπει να είναι ακέραιοι, μεταξύ των ψηφίων 2 και 6.");
            errorLabel.setVisible(true);
            return false;
        }

        //sensors should not be null
        if (autoScanRadioButton.isSelected() && selectionSensor == null) {
            errorLabel.setText("Το κουμπί επιλογής δεν πρέπει να είναι κενό");
            errorLabel.setVisible(true);
            return false;
        } else if (manualScanRadioButton.isSelected() && (selectionSensor == null || navigationSensor == null)) {
            errorLabel.setText("Τα κουμπιά επιλογής και πλοήγησης δεν πρέπει να είναι κενά");
            errorLabel.setVisible(true);
            return false;
        }

        //selection and navigation sensors should not be the same
        if (manualScanRadioButton.isSelected()) {

            if (selectionSensor instanceof MouseSensor && navigationSensor instanceof MouseSensor
                    && ((MouseSensor) selectionSensor).getButton() == ((MouseSensor) navigationSensor).getButton()
                    && ((MouseSensor) selectionSensor).getClickCount() == ((MouseSensor) navigationSensor).getClickCount()) {
                errorLabel.setText("Τα κουμπιά επιλογής και πλοήγησης πρέπει να είναι διαφορετικά");
                errorLabel.setVisible(true);
                return false;
            }

            if (selectionSensor instanceof KeyboardSensor && navigationSensor instanceof KeyboardSensor
                    && ((KeyboardSensor) selectionSensor).getKeyCode() == ((KeyboardSensor) navigationSensor).getKeyCode()) {
                errorLabel.setText("Τα κουμπιά επιλογής και πλοήγησης πρέπει να είναι διαφορετικά");
                errorLabel.setVisible(true);
                return false;
            }
        }

        //image or text should be selected
        if (!imageCheckBox.isSelected() && !textCheckBox.isSelected()) {
            errorLabel.setText("Οι λέξεις θα πρέπει να έχουν τουλάχιστον ένα από τα δύο: λεκτικό, εικόνα");
            errorLabel.setVisible(true);
            return false;
        }

        return true;
    }

    private void createUserButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createUserButtonActionPerformed

        if (validateUser()) {
            User createdUser = new User(nameTextField.getText(), userImage);
            createdUser.getConfiguration().setRotationSpeed(rotationSpeedSlider.getValue());
            createdUser.getConfiguration().setNavigationSensor(navigationSensor);
            createdUser.getConfiguration().setSelectionSensor(selectionSensor);
            createdUser.getConfiguration().setDefaultGridRow(Integer.parseInt(rowsTextField.getText()));
            createdUser.getConfiguration().setDefaultGridColumn(Integer.parseInt(columnsTextField.getText()));
            createdUser.getConfiguration().setSound(soundCheckBox.isSelected());
            createdUser.getConfiguration().setImage(imageCheckBox.isSelected());
            createdUser.getConfiguration().setText(textCheckBox.isSelected());
            try {
                userService.save(createdUser);
                parent.changePanel(new MainPanel(parent));
            } catch (Exception ex) {
                Logger.getLogger(UserFormPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_createUserButtonActionPerformed

    private void uploadImageLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_uploadImageLabelMouseClicked
        userImage = "";
        JFileChooser chooser = new JFileChooser();

        chooser.setDialogTitle("Διαλέξτε εικόνα");
        chooser.setAcceptAllFileFilterUsed(false);
        chooser.setFileFilter(new FileNameExtensionFilter("Image Files", "png", "jpg", "jpeg", "JPG", "JPEG", "gif"));
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            userImage = chooser.getSelectedFile().getAbsolutePath();
            uploadImageLabel.setIcon(guiHelper.getIcon(userImage));
        }
    }//GEN-LAST:event_uploadImageLabelMouseClicked

    private void editUserButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_editUserButtonMouseClicked
        if (validateUser()) {
            User editedUser = new User(nameTextField.getText(), userImage);
            editedUser.getConfiguration().setRotationSpeed(rotationSpeedSlider.getValue());
            editedUser.getConfiguration().setNavigationSensor(navigationSensor);
            editedUser.getConfiguration().setSelectionSensor(selectionSensor);
            editedUser.getConfiguration().setDefaultGridRow(Integer.parseInt(rowsTextField.getText()));
            editedUser.getConfiguration().setDefaultGridColumn(Integer.parseInt(columnsTextField.getText()));
            editedUser.getConfiguration().setSound(soundCheckBox.isSelected());
            editedUser.getConfiguration().setImage(imageCheckBox.isSelected());
            editedUser.getConfiguration().setText(textCheckBox.isSelected());

            try {
                // Save to xml file
                userService.update(editedUser, user.getName());
                parent.changePanel(new MainPanel(parent));
            } catch (Exception ex) {
                Logger.getLogger(UserFormPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_editUserButtonMouseClicked

    /**
     * The action listeners for the text fields and radio buttons
     */
    private void setActionListeners() {
        selectionSensorTextField1.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent me) {
                if (selectionSensorTextField1.isEnabled()) {
                    selectionSensor = new MouseSensor(me.getButton(), me.getClickCount(), "mouse");
                    navigationSensor = null;
                    selectionSensorTextField1.setText(setSensorText(selectionSensor));
                }
            }
        });
        selectionSensorTextField1.addKeyListener(new KeyAdapter() {
            public void keyReleased(KeyEvent ke) {
                if (selectionSensorTextField1.isEnabled()) {
                    selectionSensor = new KeyboardSensor(ke.getKeyCode(), String.valueOf(ke.getKeyChar()), "keyboard");
                    navigationSensor = null;
                    selectionSensorTextField1.setText(setSensorText(selectionSensor));
                }
            }
        });

        navigationSensorTextField.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent me) {
                if (navigationSensorTextField.isEnabled()) {
                    navigationSensor = new MouseSensor(me.getButton(), me.getClickCount(), "mouse");
                    navigationSensorTextField.setText(setSensorText(navigationSensor));
                }
            }
        });
        navigationSensorTextField.addKeyListener(new KeyAdapter() {
            public void keyReleased(KeyEvent ke) {
                if (navigationSensorTextField.isEnabled()) {
                    navigationSensor = new KeyboardSensor(ke.getKeyCode(), String.valueOf(ke.getKeyChar()), "keyboard");
                    navigationSensorTextField.setText(setSensorText(navigationSensor));
                }
            }
        });

        selectionSensorTextField2.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent me) {
                if (selectionSensorTextField2.isEnabled()) {
                    selectionSensor = new MouseSensor(me.getButton(), me.getClickCount(), "mouse");
                    selectionSensorTextField2.setText(setSensorText(selectionSensor));
                }
            }
        });
        selectionSensorTextField2.addKeyListener(new KeyAdapter() {
            public void keyReleased(KeyEvent ke) {
                if (selectionSensorTextField2.isEnabled()) {
                    selectionSensor = new KeyboardSensor(ke.getKeyCode(), String.valueOf(ke.getKeyChar()), "keyboard");
                    selectionSensorTextField2.setText(setSensorText(selectionSensor));
                }
            }
        });

        backButton.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent me) {
                parent.changePanel(new MainPanel(parent));
            }
        });

        autoScanRadioButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                if (autoScanRadioButton.isSelected()) {
                    disableTextField(selectionSensorTextField2);
                    disableTextField(navigationSensorTextField);
                    enableTextField(selectionSensorTextField1);
                }
            }
        });

        manualScanRadioButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                if (manualScanRadioButton.isSelected()) {
                    disableTextField(selectionSensorTextField1);
                    enableTextField(selectionSensorTextField2);
                    enableTextField(navigationSensorTextField);
                }
            }
        });

    }

    private void setFocusListeners() {
        selectionSensorTextField1.addFocusListener(new FocusAdapter() {
            public void focusGained(FocusEvent fe) {
                selectionSensorTextField1.setText("");
            }

            public void focusLost(FocusEvent fe) {
                if (selectionSensor == null) {
                    selectionSensorTextField1.setText("Όρισε κουμπί επιλογής");
                } else {
                    selectionSensorTextField1.setText(setSensorText(selectionSensor));
                }
            }
        });

        navigationSensorTextField.addFocusListener(new FocusAdapter() {
            public void focusGained(FocusEvent fe) {
                navigationSensorTextField.setText("");
            }

            public void focusLost(FocusEvent fe) {
                if (navigationSensor == null) {
                    navigationSensorTextField.setText("Όρισε κουμπί πλοήγησης");
                } else {
                    navigationSensorTextField.setText(setSensorText(navigationSensor));
                }
            }
        });

        selectionSensorTextField2.addFocusListener(new FocusAdapter() {
            public void focusGained(FocusEvent fe) {
                selectionSensorTextField2.setText("");
            }

            public void focusLost(FocusEvent fe) {
                if (selectionSensor == null) {
                    selectionSensorTextField2.setText("Όρισε κουμπί επιλογής");
                } else {
                    selectionSensorTextField2.setText(setSensorText(selectionSensor));
                }
            }
        });

        nameTextField.addFocusListener(new FocusAdapter() {
            public void focusGained(FocusEvent fe) {
                if ("Όνομα χρήστη".equals(nameTextField.getText())) {
                    nameTextField.setText("");
                }
            }

            public void focusLost(FocusEvent fe) {
                if (nameTextField.getText().isEmpty()) {
                    nameTextField.setText("Όνομα χρήστη");
                }
            }
        });
    }

    private void setUI() {

        ButtonGroup scanButtons = new ButtonGroup();
        scanButtons.add(autoScanRadioButton);
        scanButtons.add(manualScanRadioButton);

        //set the titles of the form
        nameLabel.setFont(new Font(UIConstants.getMainFont(), Font.BOLD, 14));
        imageLabel.setFont(new Font(UIConstants.getMainFont(), Font.BOLD, 14));
        sensorLabel.setFont(new Font(UIConstants.getMainFont(), Font.BOLD, 14));
        rotationSpeedLabel.setFont(new Font(UIConstants.getMainFont(), Font.BOLD, 14));
        defaultGridSizeLabel.setFont(new Font(UIConstants.getMainFont(), Font.BOLD, 14));
        tilesLabel.setFont(new Font(UIConstants.getMainFont(), Font.BOLD, 14));

        nameTextField.setBorder(BorderFactory.createMatteBorder(0, 0, 2, 0, Color.GRAY));
        nameTextField.setFont(new Font(UIConstants.getMainFont(), Font.ITALIC, 14));
        nameTextField.setHorizontalAlignment(JTextField.CENTER);
        uploadImageLabel.setFont(new Font(UIConstants.getMainFont(), Font.BOLD, 14));

        rowsTextField.setBorder(BorderFactory.createMatteBorder(0, 0, 2, 0, Color.GRAY));
        rowsTextField.setHorizontalAlignment(JTextField.CENTER);
        columnsTextField.setBorder(BorderFactory.createMatteBorder(0, 0, 2, 0, Color.GRAY));
        columnsTextField.setHorizontalAlignment(JTextField.CENTER);

        disableTextField(selectionSensorTextField2);
        disableTextField(navigationSensorTextField);
        enableTextField(selectionSensorTextField1);

        //set the text color
        selectionSensorTextField1.setForeground(Color.decode(UIConstants.getMainColor()));
        selectionSensorTextField2.setForeground(Color.decode(UIConstants.getMainColor()));
        navigationSensorTextField.setForeground(Color.decode(UIConstants.getMainColor()));

        selectionSensorTextField1.setHorizontalAlignment(JTextField.CENTER);
        selectionSensorTextField2.setHorizontalAlignment(JTextField.CENTER);
        navigationSensorTextField.setHorizontalAlignment(JTextField.CENTER);
    }

    private void disableTextField(JTextField textField) {
        textField.setEnabled(false);
        textField.setForeground(Color.decode(UIConstants.getDisabledColor()));
        textField.setBorder(BorderFactory.createMatteBorder(1, 1, 1, 1, Color.decode(UIConstants.getDisabledColor())));
        textField.setBorder(BorderFactory.createCompoundBorder(textField.getBorder(), BorderFactory.createEmptyBorder(5, 5, 5, 5)));
    }

    private void enableTextField(JTextField textField) {
        textField.setEnabled(true);
        textField.setForeground(Color.decode(UIConstants.getMainColor()));
        textField.setBorder(BorderFactory.createMatteBorder(1, 1, 1, 1, Color.decode(UIConstants.getMainColor())));
        textField.setBorder(BorderFactory.createCompoundBorder(textField.getBorder(), BorderFactory.createEmptyBorder(5, 5, 5, 5)));
    }

    private String setSensorText(Sensor s) {
        String text = "";

        if (s instanceof MouseSensor) {
            MouseSensor sensor = (MouseSensor) s;
            text += sensor.getClickCount();

            if (sensor.getButton() == 1 && sensor.getClickCount() == 1) {
                text += " αριστερό κλικ";
            } else if (sensor.getButton() == 1 && sensor.getClickCount() > 1) {
                text += " αριστερά κλικ";
            } else if (sensor.getButton() == 2 && sensor.getClickCount() == 1) {
                text += " μεσαίο κλικ";
            } else if (sensor.getButton() == 2 && sensor.getClickCount() > 1) {
                text += " μεσαία κλικ";
            } else if (sensor.getButton() == 3 && sensor.getClickCount() == 1) {
                text += " δεξί κλικ";
            } else if (sensor.getButton() == 3 && sensor.getClickCount() > 1) {
                text += " δεξιά κλικ";
            }

        } else if (s instanceof KeyboardSensor) {
            KeyboardSensor sensor = (KeyboardSensor) s;
            text += "πλήκτρο ";
            if (sensor.getKeyCode() == 10) {
                text += "enter";
            } else if (sensor.getKeyCode() == 32) {
                text += "space";
            } else {
                text += sensor.getKeyChar();
            }
        }

        return text;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton autoScanRadioButton;
    private javax.swing.JButton backButton;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.JTextField columnsTextField;
    private javax.swing.JButton createUserButton;
    private javax.swing.JLabel defaultGridSizeLabel;
    private javax.swing.JButton editUserButton;
    private javax.swing.JLabel errorLabel;
    private javax.swing.JCheckBox imageCheckBox;
    private javax.swing.JLabel imageLabel;
    private javax.swing.JButton jButton1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JRadioButton manualScanRadioButton;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JTextField nameTextField;
    private javax.swing.JTextField navigationSensorTextField;
    private javax.swing.JLabel rotationSpeedLabel;
    private javax.swing.JSlider rotationSpeedSlider;
    private javax.swing.JTextField rowsTextField;
    private javax.swing.JTextField selectionSensorTextField1;
    private javax.swing.JTextField selectionSensorTextField2;
    private javax.swing.JLabel sensorLabel;
    private javax.swing.JCheckBox soundCheckBox;
    private javax.swing.JCheckBox textCheckBox;
    private javax.swing.JLabel tilesLabel;
    private javax.swing.JLabel uploadImageLabel;
    private javax.swing.JPanel userPanel;
    private javax.swing.JLabel xLabel;
    // End of variables declaration//GEN-END:variables
}
