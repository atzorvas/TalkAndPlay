package org.scify.talkandplay.gui.grid.communication;

import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import org.scify.talkandplay.gui.grid.BaseGridPanel;
import org.scify.talkandplay.gui.grid.GridFrame;
import org.scify.talkandplay.gui.grid.tiles.TileAction;
import org.scify.talkandplay.models.Category;
import org.scify.talkandplay.models.User;
import org.scify.talkandplay.services.CategoryService;
import org.scify.talkandplay.services.SensorService;

public class CommunicationPanel extends BaseGridPanel {

    private User user;

    private CategoryService categoryService;
    private SensorService sensorService;

    private Category rootCategory;

    final CommunicationPanel currentPanel = this;

    private int grid;
    private int stopped = 0;

    public CommunicationPanel(User user, GridFrame parent) throws IOException {
        super(user, parent);
        this.categoryService = new CategoryService();
        this.user = user;
        this.sensorService = new SensorService(this.user);
        this.rootCategory = categoryService.getCategoriesWithRootParent(user);
        this.currentCategory = new Category();

        initComponents();
        initCustomComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 535, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 327, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void initCustomComponents() throws IOException {
        setBorder(new EmptyBorder(0, 10, 10, 10));
        initLayout();
        c.gridx = -1;
        c.gridy = 0;

        drawImages(rootCategory);
    }

    /**
     * Draw the categories and their sub categories. It may not look like it,
     * but this klassy piece of code works.
     *
     * @param category
     * @throws IOException
     */
    private void drawImages(Category category) throws IOException {
        removeAll();
        currentCategory = category;
        c.gridx = -1;
        c.gridy = 0;
        panelList = new ArrayList();
        int emptiesCount = 0;

        setGrid(category);

        if (category.getSubCategories().size() > 0) {
            //show only the num of images that fit the grid
            if (category.getSubCategories().size() >= grid) {
                int i;
                for (i = stopped; i < (grid + stopped - 2); i++) {
                    if (i > category.getSubCategories().size() - 1) {
                        emptiesCount++;
                    } else {
                        JPanel panel = createCategoryItem(category.getSubCategories().get(i));
                        add(panel, c);
                        setGrid(category);
                        panelList.add(panel);
                    }
                }
                if (i <= category.getSubCategories().size() - 1) {
                    stopped = i;
                    JPanel panel = createMoreItem(category);
                    add(panel, c);
                    setGrid(category);
                    panelList.add(panel);
                } else {
                    stopped = 0;
                }
            } else {
                for (Category childCategory : category.getSubCategories()) {
                    JPanel panel = createCategoryItem(childCategory);
                    add(panel, c);
                    setGrid(category);
                    panelList.add(panel);
                }
            }
        }

        //if parent is null, display the first menu
        if (emptiesCount == 0 && null == category.getParentCategory()) {
            JPanel panel = createBackItem(category, true);
            add(panel, c);
            setGrid(category);
            panelList.add(panel);
        } else if (emptiesCount == 0 && null != category.getParentCategory()) {
            JPanel panel = createBackItem(category, false);
            add(panel, c);
            setGrid(category);
            panelList.add(panel);
        }

        //check if there's empty space that should be filled with
        //mock JLabels in order to keep the grid size
        if (emptiesCount > 0) {
            add(createLessItem(category));
            /* for (int i = 0; i < emptiesCount; i++) {
             add(new JLabel(), c);
             setGrid(category);
             }*/
        }

        fillWithEmpties();
        // System.out.println(category.getName() + " " + c.gridx + " " + c.gridy);
        timer.setList(panelList);
        timer.start();

        revalidate();
        repaint();

        parent.clearGrid();
        parent.addGrid(this);
        parent.revalidate();
        parent.repaint();
    }

    /**
     * Create the JPanel that holds a category
     *
     * @param category
     * @return
     * @throws IOException
     */
    private JPanel createCategoryItem(final Category category) throws IOException {

        JPanel panel = tileCreator.create(category.getName(),
                category.getImage(),
                category.getSound(),
                new TileAction() {
                    @Override
                    public void act() {
                        timer.cancel();
                        currentCategory = category;
                    }

                    @Override
                    public void audioFinished() {
                        if (currentCategory.getSubCategories().size() > 0) {
                            currentPanel.showNextGrid(currentCategory);
                        } else {
                            timer.setList(panelList);
                            timer.start();
                        }
                    }
                });

        return panel;
    }

    /**
     * Create the JPanel that holds the back button
     *
     * @param category
     * @return
     * @throws IOException
     */
    private JPanel createBackItem(final Category category, final boolean isRoot) throws IOException {

        JPanel panel = tileCreator.create("Πίσω",
                null,
                getClass().getResource("/org/scify/talkandplay/resources/back-icon.png"),
                null,
                new TileAction() {
                    @Override
                    public void act() {
                        timer.cancel();
                        stopped = 0;
                        if (isRoot) {
                            showMainMenu();
                        } else if (!isRoot && category.getParentCategory() == null) {
                            try {
                                drawImages(rootCategory);
                            } catch (IOException ex) {
                                Logger.getLogger(CommunicationPanel.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        } else {
                            try {
                                drawImages(category.getParentCategory());
                            } catch (IOException ex) {
                                Logger.getLogger(CommunicationPanel.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                    }

                    @Override
                    public void audioFinished() {
                        return;
                    }

                    @Override
                    public boolean mute() {
                        return true;
                    }
                });

        return panel;
    }

    /**
     * Create the JPanel that holds the more button
     *
     * @param category
     * @return
     * @throws IOException
     */
    private JPanel createMoreItem(final Category category) throws IOException {

        JPanel panel = tileCreator.create("Περισσότερα",
                null,
                getClass().getResource("/org/scify/talkandplay/resources/more-icon.png"),
                null,
                new TileAction() {
                    @Override
                    public void act() {
                        timer.cancel();
                        try {
                            drawImages(category);
                        } catch (IOException ex) {
                            Logger.getLogger(CommunicationPanel.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }

                    @Override
                    public void audioFinished() {
                        return;
                    }

                    @Override
                    public boolean mute() {
                        return true;
                    }
                });

        return panel;
    }

    /**
     * Create the JPanel that holds the less button
     *
     * @param category
     * @return
     * @throws IOException
     */
    private JPanel createLessItem(final Category category) throws IOException {

        JPanel panel = tileCreator.create("Λιγότερα",
                null,
                getClass().getResource("/org/scify/talkandplay/resources/less-icon.png"),
                null,
                new TileAction() {
                    @Override
                    public void act() {
                        timer.cancel();
                        try {
                            drawImages(category);
                        } catch (IOException ex) {
                            Logger.getLogger(CommunicationPanel.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }

                    @Override
                    public void audioFinished() {
                        return;
                    }

                    @Override
                    public boolean mute() {
                        return true;
                    }
                });

        return panel;
    }

    private void showNextGrid(Category category) {
        try {
            drawImages(category);
        } catch (IOException ex) {
            Logger.getLogger(CommunicationPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * Set the grid bag constraints for a certain category
     *
     * @param category
     */
    private void setGrid(Category category) {
        int rows, columns;
        if (category == null) {
            rows = user.getConfiguration().getDefaultGridRow();
            columns = user.getConfiguration().getDefaultGridColumn();
        } else {
            rows = category.getRows();
            columns = category.getColumns();
        }
        grid = rows * columns;

        if (c.gridx == (rows - 1)) {
            c.gridx = 0;
            c.gridy++;
        } else {
            c.gridx++;
        }
        /* if (c.gridy == (columns - 1)) {
         c.gridy++;
         }*/

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
