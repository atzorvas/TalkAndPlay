package org.scify.talkandplay.gui.grid.entertainment;

import java.awt.Color;
import java.awt.Component;
import java.awt.ComponentOrientation;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Image;
import java.awt.event.KeyAdapter;
import java.awt.event.MouseAdapter;
import java.io.File;
import java.net.URL;
import java.util.ArrayList;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.border.CompoundBorder;
import javax.swing.border.EmptyBorder;
import javax.swing.border.LineBorder;
import org.scify.talkandplay.gui.grid.GridFrame;
import org.scify.talkandplay.gui.grid.TimerManager;
import org.scify.talkandplay.gui.helpers.UIConstants;
import org.scify.talkandplay.models.User;
import org.scify.talkandplay.models.sensors.KeyboardSensor;
import org.scify.talkandplay.models.sensors.MouseSensor;
import org.scify.talkandplay.models.sensors.Sensor;
import org.scify.talkandplay.services.SensorService;

public class MusicPanel extends javax.swing.JPanel {

    private User user;
    private GridFrame parent;
    private int selectedFile;
    private String currentFile;
    private ArrayList<JPanel> panelList;
    private ArrayList<JPanel> controlsList;
    private File[] files;
    private int start, end;
    private int step;
    protected TimerManager timer;
    private MediaPlayerPanel mediaPlayerPanel;

    private SensorService sensorService;

    private JPanel songsPanel, sliderPanel, playerPanel, prevSongs, nextSongs, controls;

    private int currSec = 0;

    public MusicPanel(User user, GridFrame parent) {
        this.user = user;
        this.parent = parent;
        this.sensorService = new SensorService(user);
        this.panelList = new ArrayList();
        this.controlsList = new ArrayList();
        this.mediaPlayerPanel = new MediaPlayerPanel(this, parent);
        this.timer = new TimerManager(panelList, user.getConfiguration().getRotationSpeed() * 1000, user.getConfiguration().getRotationSpeed() * 1000);

        initComponents();
        initCustomComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 517, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 353, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void initCustomComponents() {

        setBorder(new EmptyBorder(0, 20, 20, 20));
        setBackground(Color.white);
        setLayout(new GridBagLayout());
        GridBagConstraints c = new GridBagConstraints();
        c.fill = GridBagConstraints.HORIZONTAL;
        c.anchor = GridBagConstraints.WEST;
        c.gridx = 0;
        c.gridy = 0;
        c.weighty = 1;
        c.weightx = 1;

        files = (new File(user.getEntertainmentModule().getMusicModule().getFolderPath())).listFiles();
        step = user.getEntertainmentModule().getMusicModule().getPlaylistSize() - 3;
        start = 0;
        if (files.length < step) {
            end = files.length;
        } else {
            end = step;
        }

        songsPanel = new JPanel();
        songsPanel.setLayout(new BoxLayout(songsPanel, BoxLayout.PAGE_AXIS));
        songsPanel.setBackground(Color.white);

        drawSongList();
        initPlayerButtons();

        add(songsPanel, c);
        c.gridy++;
        add(mediaPlayerPanel, c);
        c.gridy++;
        add(playerPanel, c);

        timer.setList(panelList);
        timer.setDefaultBackgroundColor(UIConstants.getGrey());
        timer.start();

        revalidate();
        repaint();
        parent.clearGrid();
        parent.addGrid(this);
        parent.revalidate();
        parent.repaint();
    }

    private void drawSongList() {

        songsPanel.removeAll();
        prevSongs = drawSongPanel("Προηγούμενα τραγούδια");
        nextSongs = drawSongPanel("Επόμενα τραγούδια");
        controls = drawSongPanel("Χειριστήριο");
        songsPanel.add(prevSongs);
        panelList.add(prevSongs);

        for (int i = start; i < end; i++) {
            System.out.println(i);
            if (i >= files.length) {
                songsPanel.add(new JLabel(""));
            } else {
                JPanel panel = drawSongPanel(files[i].getName());
                songsPanel.add(panel);
                panelList.add(panel);
                addSongListener(panel, files[i]);
            }
        }

        songsPanel.add(nextSongs);
        songsPanel.add(controls);
        songsPanel.revalidate();
        songsPanel.repaint();

        panelList.add(nextSongs);
        panelList.add(controls);

        addListeners();
    }

    private void initPlayerButtons() {

        playerPanel = new JPanel();
        playerPanel.setLayout(new GridBagLayout());
        playerPanel.setBackground(Color.white);
        GridBagConstraints c = new GridBagConstraints();
        c.fill = GridBagConstraints.NONE;
        c.gridx = 0;
        c.gridy = 0;
        c.weightx = 1;
        c.weighty = 1;

        JPanel prevPanel = drawButton("Προηγούμενο", getClass().getResource("/org/scify/talkandplay/resources/prev-button.png"));
        JPanel playPanel = drawButton("Αναπαραγωγή", getClass().getResource("/org/scify/talkandplay/resources/play-button.png"));
        JPanel nextPanel = drawButton("Επόμενο", getClass().getResource("/org/scify/talkandplay/resources/next-button.png"));
        JPanel listPanel = drawButton("Λίστα", getClass().getResource("/org/scify/talkandplay/resources/up-icon.png"));
        JPanel exitPanel = drawButton("Έξοδος", getClass().getResource("/org/scify/talkandplay/resources/exit-icon.png"));

        playerPanel.add(prevPanel, c);
        c.gridx++;
        playerPanel.add(playPanel, c);
        c.gridx++;
        playerPanel.add(nextPanel, c);
        c.gridx++;
        playerPanel.add(listPanel, c);
        c.gridx++;
        playerPanel.add(exitPanel, c);

        controlsList.add(prevPanel);
        controlsList.add(playPanel);
        controlsList.add(nextPanel);
        controlsList.add(listPanel);
        controlsList.add(exitPanel);
    }

    private JPanel drawButton(String text, URL imageIcon) {
        JLabel label = new JLabel(text);
        label.setBorder(new EmptyBorder(5, 5, 5, 5));
        label.setFont(new Font(UIConstants.getMainFont(), Font.PLAIN, 18));
        label.setAlignmentX(Component.CENTER_ALIGNMENT);

        JLabel icon = new JLabel(new ImageIcon(new ImageIcon(imageIcon).getImage().getScaledInstance(30, 30, Image.SCALE_SMOOTH)));
        icon.setBorder(new EmptyBorder(5, 5, 5, 5));
        icon.setAlignmentX(Component.CENTER_ALIGNMENT);

        JPanel panel = new JPanel();
        panel.setLayout(new BoxLayout(panel, BoxLayout.PAGE_AXIS));
        panel.setBackground(Color.decode(UIConstants.getGrey()));
        panel.setPreferredSize(new Dimension(180, 100));
        panel.setBorder((new LineBorder(Color.white, 10)));

        panel.add(label);
        panel.add(icon);
        return panel;
    }

    private JPanel drawSongPanel(String text) {
        JLabel fileLabel = new JLabel(text);
        fileLabel.setFont(new Font(UIConstants.getMainFont(), Font.PLAIN, 18));
        fileLabel.setHorizontalAlignment(JLabel.LEFT);
        fileLabel.setBorder(new EmptyBorder(5, 5, 5, 5));

        JPanel songPanel = new JPanel();
        songPanel.setLayout(new FlowLayout());
        songPanel.setBackground(Color.decode(UIConstants.getGrey()));
        songPanel.setBorder((new LineBorder(Color.white, 10)));
        songPanel.setComponentOrientation(ComponentOrientation.LEFT_TO_RIGHT);

        songPanel.add(fileLabel);

        return songPanel;
    }

    private void addListeners() {

        prevSongs.addMouseListener(new MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Sensor sensor = new MouseSensor(evt.getButton(), evt.getClickCount(), "mouse");
                if (sensorService.shouldSelect(sensor)) {
                    timer.cancel();
                    configurePrevSongs();
                    if (end <= files.length + step) {
                        drawSongList();
                        timer.start();
                    }
                }
            }
        });
        prevSongs.addKeyListener(new KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                Sensor sensor = new KeyboardSensor(evt.getKeyCode(), String.valueOf(evt.getKeyChar()), "keyboard");
                if (sensorService.shouldSelect(sensor)) {
                    configurePrevSongs();
                    if (end < files.length) {
                        drawSongList();
                    }
                }
            }
        });

        nextSongs.addMouseListener(new MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Sensor sensor = new MouseSensor(evt.getButton(), evt.getClickCount(), "mouse");
                if (sensorService.shouldSelect(sensor)) {
                    configureNextSongs();
                    if (end <= files.length + step) {
                        drawSongList();
                    }
                }
            }
        });
        nextSongs.addKeyListener(new KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                Sensor sensor = new KeyboardSensor(evt.getKeyCode(), String.valueOf(evt.getKeyChar()), "keyboard");
                if (sensorService.shouldSelect(sensor)) {
                    configureNextSongs();
                    if (end <= files.length) {
                        drawSongList();
                    }
                }
            }
        });
    }

    private void addSongListener(JPanel panel, final File file) {
        panel.addMouseListener(new MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Sensor sensor = new MouseSensor(evt.getButton(), evt.getClickCount(), "mouse");
                if (sensorService.shouldSelect(sensor)) {
                    timer.cancel();
                    currentFile = file.getName();
                    //setSelected();
                    mediaPlayerPanel.playMedia(getFilePath(file.getName()));
                    timer.setList(controlsList);
                    timer.setSelected(0);
                    timer.start();
                }
            }
        });
        panel.addKeyListener(new KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                Sensor sensor = new KeyboardSensor(evt.getKeyCode(), String.valueOf(evt.getKeyChar()), "keyboard");
                if (sensorService.shouldSelect(sensor)) {
                    timer.cancel();
                    currentFile = file.getName();
                    // setSelected();
                    mediaPlayerPanel.playMedia(getFilePath(file.getName()));
                    timer.setList(controlsList);
                    timer.start();
                }
            }
        });
    }

    private void configureNextSongs() {
        start = end;

        if (end + step < files.length) {
            end += step;
        } else {
            end = files.length;
        }
        System.out.println("start " + start + ", end " + end);
    }

    private void configurePrevSongs() {
        end = start;

        if (start - step > 0) {
            start -= step;
        } else {
            start = 0;
        }
        System.out.println("start " + start + ", end " + end);
    }

    /*
     public void setTimer() {
     timer = new Timer();
     timer.schedule(new TimerTask() {
     @Override
     public void run() {
     if (selectedFile == 0) {
     fileLabels.get(fileLabels.size() - 1).setFont(new Font("DejaVu Sans", Font.PLAIN, 12));
     fileLabels.get(selectedFile).setFont(new Font("DejaVu Sans", Font.BOLD, 12));
     selectedFile++;
     } else if (selectedFile == fileLabels.size() - 1) {
     fileLabels.get(selectedFile - 1).setFont(new Font("DejaVu Sans", Font.PLAIN, 12));
     fileLabels.get(selectedFile).setFont(new Font("DejaVu Sans", Font.BOLD, 12));
     selectedFile = 0;
     } else if (selectedFile < fileLabels.size() - 1 && selectedFile > 0) {
     fileLabels.get(selectedFile - 1).setFont(new Font("DejaVu Sans", Font.PLAIN, 12));
     fileLabels.get(selectedFile).setFont(new Font("DejaVu Sans", Font.BOLD, 12));
     selectedFile++;
     }
     }
     }, user.getConfiguration().getRotationSpeed() * 1000, user.getConfiguration().getRotationSpeed() * 1000);
     }*/
    public String getFilePath(String fileName) {
        return user.getEntertainmentModule().getMusicModule().getFolderPath() + File.separator + fileName;
    }
    /*
     public String getPreviousFile() {
     timer.cancel();
     for (int i = 0; i < fileLabels.size(); i++) {
     if (fileLabels.get(i).getText().equals(currentFile)) {
     if (i == 0) {
     currentFile = fileLabels.get(fileLabels.size() - 1).getText();
     } else {
     currentFile = fileLabels.get(i - 1).getText();
     }
     break;
     }
     }
     return currentFile;
     }*/

    /*  public String getNextFile() {
     timer.cancel();
     for (int i = 0; i < fileLabels.size(); i++) {
     if (fileLabels.get(i).getText().equals(currentFile)) {
     if (i == fileLabels.size() - 1) {
     currentFile = fileLabels.get(0).getText();
     } else {
     currentFile = fileLabels.get(i + 1).getText();
     }
     break;
     }
     }
     return currentFile;
     }

     */
    /* public void setSelected() {
     for (int i = 0; i < fileLabels.size(); i++) {
     if (fileLabels.get(i).getText().equals(currentFile)) {
     fileLabels.get(i).setFont(new Font("DejaVu Sans", Font.BOLD, 12));
     } else {
     fileLabels.get(i).setFont(new Font("DejaVu Sans", Font.PLAIN, 12));

     }
     }
     }*/

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
