/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.scify.talkandplay.gui.grid;

import java.awt.Font;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.util.ArrayList;
import java.util.List;
import java.util.Timer;
import java.util.TimerTask;
import javax.swing.BoxLayout;
import javax.swing.JLabel;
import javax.swing.JPanel;
import org.scify.talkandplay.models.User;
import uk.co.caprica.vlcj.component.AudioMediaListPlayerComponent;
import uk.co.caprica.vlcj.component.AudioMediaPlayerComponent;
import uk.co.caprica.vlcj.player.MediaPlayer;
import uk.co.caprica.vlcj.player.MediaPlayerEventAdapter;

/**
 *
 * @author christina
 */
public class MusicPanel extends javax.swing.JPanel {

    private User user;
    private GridFrame parent;
    private Timer timer;
    private int selectedFile;
    private List<JLabel> fileLabels;

    private AudioMediaPlayerComponent audioPlayer;

    /**
     * Creates new form MusicPanel
     */
    public MusicPanel(User user, GridFrame parent) {
        this.user = user;
        this.parent = parent;
        this.audioPlayer = new AudioMediaListPlayerComponent();
        this.fileLabels = new ArrayList<>();

        initComponents();
        initAudioPlayer();
        initCustomComponents();
    }

    private void initAudioPlayer() {
        audioPlayer.getMediaPlayer().addMediaPlayerEventListener(new MediaPlayerEventAdapter() {
            @Override
            public void finished(MediaPlayer mediaPlayer) {
                setTimer();
            }

            @Override
            public void positionChanged(MediaPlayer mp, float f) {
                int iPos = (int) (f * 100.0);
                mediaSlider.setValue(iPos);
            }
        });

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        musicPanel = new javax.swing.JPanel();
        mediaPlayerPanel = new javax.swing.JPanel();
        mediaSlider = new javax.swing.JSlider();
        prevButton = new javax.swing.JButton();
        nextButton = new javax.swing.JButton();
        playButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        endLabel = new javax.swing.JLabel();
        filesPanel = new javax.swing.JPanel();

        mediaSlider.setToolTipText("");
        mediaSlider.setValue(0);

        prevButton.setText("<<");
        prevButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prevButtonActionPerformed(evt);
            }
        });

        nextButton.setText(">>");

        playButton.setText("Play");
        playButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("00:00:00");

        endLabel.setText("jLabel2");

        javax.swing.GroupLayout mediaPlayerPanelLayout = new javax.swing.GroupLayout(mediaPlayerPanel);
        mediaPlayerPanel.setLayout(mediaPlayerPanelLayout);
        mediaPlayerPanelLayout.setHorizontalGroup(
            mediaPlayerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mediaPlayerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mediaPlayerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mediaPlayerPanelLayout.createSequentialGroup()
                        .addComponent(prevButton)
                        .addGap(62, 62, 62)
                        .addComponent(playButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(nextButton))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mediaPlayerPanelLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(mediaSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(endLabel)))
                .addContainerGap())
        );
        mediaPlayerPanelLayout.setVerticalGroup(
            mediaPlayerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mediaPlayerPanelLayout.createSequentialGroup()
                .addContainerGap(110, Short.MAX_VALUE)
                .addGroup(mediaPlayerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mediaSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(endLabel))
                .addGap(12, 12, 12)
                .addGroup(mediaPlayerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(prevButton)
                    .addComponent(nextButton)
                    .addComponent(playButton))
                .addContainerGap())
        );

        javax.swing.GroupLayout filesPanelLayout = new javax.swing.GroupLayout(filesPanel);
        filesPanel.setLayout(filesPanelLayout);
        filesPanelLayout.setHorizontalGroup(
            filesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 169, Short.MAX_VALUE)
        );
        filesPanelLayout.setVerticalGroup(
            filesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 311, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout musicPanelLayout = new javax.swing.GroupLayout(musicPanel);
        musicPanel.setLayout(musicPanelLayout);
        musicPanelLayout.setHorizontalGroup(
            musicPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(musicPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(filesPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(mediaPlayerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        musicPanelLayout.setVerticalGroup(
            musicPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(musicPanelLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(musicPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(filesPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mediaPlayerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(31, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(musicPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(musicPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void prevButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prevButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_prevButtonActionPerformed

    private void playButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playButtonActionPerformed
        audioPlayer.getMediaPlayer().pause();
    }//GEN-LAST:event_playButtonActionPerformed

    private void initCustomComponents() {
        File musicFolder = new File(user.getEntertainmentModule().getMusicModule().getFolderPath());

        filesPanel.setLayout(new BoxLayout(filesPanel, BoxLayout.PAGE_AXIS));

        JLabel fileLabel;
        for (final File file : musicFolder.listFiles()) {
            fileLabel = new JLabel(file.getName());
            fileLabels.add(fileLabel);
            filesPanel.add(fileLabel);
            fileLabel.addMouseListener(new MouseAdapter() {
                public void mouseClicked(MouseEvent e) {
                    timer.cancel();
                    int seconds = (int) (audioPlayer.getMediaPlayer().getLength() / 1000) % 60;
                    int minutes = (int) ((audioPlayer.getMediaPlayer().getLength() / (1000 * 60)) % 60);
                    int hours = (int) ((audioPlayer.getMediaPlayer().getLength() / (1000 * 60 * 60)) % 24);
                    endLabel.setText(String.valueOf(hours)+":"+String.valueOf(minutes)+":"+String.valueOf(seconds));
                    
                    audioPlayer.getMediaPlayer().playMedia(user.getEntertainmentModule().getMusicModule().getFolderPath() + File.separator + file.getName());
                }
            });
        }

        if (fileLabels.size() == 0) {
            fileLabels.add(new JLabel("Δεν υπάρχουν αρχεία"));
        } else {
            setTimer();
        }

        //addListeners();
        filesPanel.revalidate();
        filesPanel.repaint();
        parent.add(musicPanel);
        parent.revalidate();
        parent.repaint();
    }

    private void setTimer() {
        timer = new Timer();
        timer.schedule(new TimerTask() {
            @Override
            public void run() {
                System.out.println(selectedFile);
                if (selectedFile == 0) {
                    fileLabels.get(fileLabels.size() - 1).setFont(new Font("DejaVu Sans", Font.PLAIN, 12));
                    fileLabels.get(selectedFile).setFont(new Font("DejaVu Sans", Font.BOLD, 12));
                    selectedFile++;
                } else if (selectedFile == fileLabels.size() - 1) {
                    fileLabels.get(selectedFile - 1).setFont(new Font("DejaVu Sans", Font.PLAIN, 12));
                    fileLabels.get(selectedFile).setFont(new Font("DejaVu Sans", Font.BOLD, 12));
                    selectedFile = 0;
                } else if (selectedFile < fileLabels.size() - 1 && selectedFile > 0) {
                    fileLabels.get(selectedFile - 1).setFont(new Font("DejaVu Sans", Font.PLAIN, 12));
                    fileLabels.get(selectedFile).setFont(new Font("DejaVu Sans", Font.BOLD, 12));
                    selectedFile++;
                }
            }
        }, user.getConfiguration().getRotationSpeed() * 1000, user.getConfiguration().getRotationSpeed() * 1000);
    }

    /* private void addListeners() {
     filesList.addListSelectionListener(new ListSelectionListener() {
     @Override
     public void valueChanged(ListSelectionEvent lse) {
     timer.cancel();
     audioPlayer.getMediaPlayer().playMedia(user.getEntertainmentModule().getMusicModule().getFolderPath() + File.separator + model.get(filesList.getSelectedIndex()).toString());
     }
     });
     }*/

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel endLabel;
    private javax.swing.JPanel filesPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel mediaPlayerPanel;
    private javax.swing.JSlider mediaSlider;
    private javax.swing.JPanel musicPanel;
    private javax.swing.JButton nextButton;
    private javax.swing.JButton playButton;
    private javax.swing.JButton prevButton;
    // End of variables declaration//GEN-END:variables
}
