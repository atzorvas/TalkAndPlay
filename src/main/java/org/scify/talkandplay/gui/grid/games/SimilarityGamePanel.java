package org.scify.talkandplay.gui.grid.games;

import java.awt.Dimension;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.JPanel;
import org.scify.talkandplay.gui.grid.BaseGridPanel;
import org.scify.talkandplay.gui.grid.GridFrame;
import org.scify.talkandplay.gui.grid.tiles.TileAction;
import org.scify.talkandplay.models.User;
import org.scify.talkandplay.models.games.GameImage;
import org.scify.talkandplay.models.games.GameType;
import org.scify.talkandplay.models.games.SimilarityGame;

public class SimilarityGamePanel extends BaseGridPanel {

    private SimilarityGame game;
    private JPanel imagesPanel, correctImagesPanel;
    private boolean endGame = false;

    private String correctImage;

    public SimilarityGamePanel(User user, GridFrame parent) {
        super(user, parent);

        initComponents();
        initCustomComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 518, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 235, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void initCustomComponents() {
        setLayout(new BoxLayout(this, BoxLayout.X_AXIS));

        imagesPanel = new JPanel();
        correctImagesPanel = new JPanel();
        imagesPanel.setLayout(new BoxLayout(imagesPanel, BoxLayout.LINE_AXIS));
        correctImagesPanel.setLayout(new BoxLayout(correctImagesPanel, BoxLayout.LINE_AXIS));

        panelList = new ArrayList<>();

        //select a random game
        Random randomGenerator = new Random();
        for (GameType gameType : user.getGameModule().getGameTypes()) {
            if ("similarityGame".equals(gameType.getType())) {
                game = (SimilarityGame) gameType.getGames().get(randomGenerator.nextInt(gameType.getGames().size()));
            }
        }

        int i = randomGenerator.nextInt(game.getImages().size());
        correctImage = game.getImages().get(i).getImage();
        correctImagesPanel.add(createGameItem(game.getImages().get(i)));

        //draw the images in a random order
        List<GameImage> tmpImages = new ArrayList<GameImage>(game.getImages());
        while (!tmpImages.isEmpty()) {
            i = randomGenerator.nextInt(tmpImages.size());
            JPanel panel = createGameItem(tmpImages.get(i));
            imagesPanel.add(panel);
            panelList.add(panel);
            tmpImages.remove(i);
        }

        add(correctImagesPanel);
        add(Box.createRigidArea(new Dimension(100, 0)));
        add(imagesPanel);
        revalidate();
        repaint();
        parent.add(this);
        parent.revalidate();
        parent.repaint();

        timer.setList(panelList);
        timer.start();

    }

    private JPanel createGameItem(final GameImage image) {

        JPanel panel = tileCreator.create("",
                image.getImage(),
                null,
                new TileAction() {
                    @Override
                    public void act() {
                        System.out.println("similarity clicky");
                        for (int i = 0; i < game.getImages().size(); i++) {
                            if (game.getImages().get(i).getImage().equals(image.getImage()) && game.getImages().get(i).getImage().equals(correctImage)) {
                                timer.cancel();
                                endGame = true;
                                congratulate();
                            } else if (game.getImages().get(i).getImage().equals(image.getImage()) && !game.getImages().get(i).getImage().equals(correctImage)) {
                                timer.cancel();
                                tileCreator.playAudio(game.getErrorSound());
                            }
                        }
                    }

                    @Override
                    public void audioFinished() {
                        if (!endGame) {
                            timer.setList(panelList);
                            timer.start();
                        }
                    }
                });

        return panel;
    }

    private void congratulate() {
        tileCreator.playAudio(game.getWinSound());

        JPanel nextGame = tileCreator.create("Επόμενο παιχνίδι",
                getClass().getResource("/org/scify/talkandplay/resources/more-icon.png").getFile(),
                null,
                new TileAction() {
                    @Override
                    public void act() {
                        SimilarityGamePanel gamePanel = new SimilarityGamePanel(user, parent);
                        parent.clearGrid();
                        parent.addGrid(gamePanel);
                    }

                    @Override
                    public void audioFinished() {
                    }
                });

        JPanel back = tileCreator.create("Πίσω",
                getClass().getResource("/org/scify/talkandplay/resources/back-icon.png").getFile(),
                null,
                new TileAction() {
                    @Override
                    public void act() {
                        GamesPanel gamesPanel = new GamesPanel(user, parent);
                        parent.clearGrid();
                        parent.addGrid(gamesPanel);
                    }

                    @Override
                    public void audioFinished() {
                    }
                });

        panelList.add(nextGame);
        panelList.add(back);

        removeAll();
        add(nextGame);
        add(back);
        revalidate();
        repaint();

        timer.setList(panelList);
        timer.start();
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
