package org.scify.talkandplay.gui.grid.games;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.Timer;
import java.util.TimerTask;
import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.ImageIcon;
import javax.swing.JPanel;
import org.scify.talkandplay.gui.grid.GridFrame;
import org.scify.talkandplay.gui.helpers.GuiHelper;
import org.scify.talkandplay.models.User;
import org.scify.talkandplay.models.games.GameImage;
import org.scify.talkandplay.models.games.GameType;
import org.scify.talkandplay.models.games.SimilarityGame;
import org.scify.talkandplay.models.sensors.KeyboardSensor;
import org.scify.talkandplay.models.sensors.MouseSensor;
import org.scify.talkandplay.models.sensors.Sensor;
import org.scify.talkandplay.services.SensorService;
import uk.co.caprica.vlcj.component.AudioMediaPlayerComponent;
import uk.co.caprica.vlcj.player.MediaPlayer;
import uk.co.caprica.vlcj.player.MediaPlayerEventAdapter;

public class SimilarityGamePanel extends javax.swing.JPanel {

    private User user;
    private GridFrame parent;
    private AudioMediaPlayerComponent audioPlayer;
    private SimilarityGame game;
    private GuiHelper guiHelper;
    private SensorService sensorService;
    private List<JPanel> panelList;
    private JPanel mainPanel, imagesPanel, correctImagesPanel;
    private Timer timer;
    private int selectedImage;
    private boolean endGame = false;

    protected final int BORDER_SIZE = 5;
    protected final int IMAGE_PADDING = 10;

    private String correctImage;

    public SimilarityGamePanel(User user, GridFrame parent) {
        this.user = user;
        this.parent = parent;
        this.audioPlayer = new AudioMediaPlayerComponent();
        this.guiHelper = new GuiHelper();
        this.sensorService = new SensorService(user);
        initComponents();
        initAudioPlayer();
        initCustomComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 518, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 235, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void initAudioPlayer() {
        audioPlayer.getMediaPlayer().addMediaPlayerEventListener(new MediaPlayerEventAdapter() {
            @Override
            public void playing(MediaPlayer mediaPlayer) {
                audioPlayer.getMediaPlayer().mute(false);
                audioPlayer.getMediaPlayer().setVolume(100);
            }

            @Override
            public void finished(MediaPlayer mediaPlayer) {
                if (!endGame) {
                    setTimer();
                }
            }
        });

        parent.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                audioPlayer.getMediaPlayer().stop();
                audioPlayer.getMediaPlayer().stop();
                e.getWindow().dispose();
            }
        });
    }

    private void initCustomComponents() {

        mainPanel = new JPanel();
        mainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.X_AXIS));

        imagesPanel = new JPanel();
        correctImagesPanel = new JPanel();
        imagesPanel.setLayout(new BoxLayout(imagesPanel, BoxLayout.LINE_AXIS));
        correctImagesPanel.setLayout(new BoxLayout(correctImagesPanel, BoxLayout.LINE_AXIS));

        panelList = new ArrayList<>();

        //select a random game
        Random randomGenerator = new Random();
        for (GameType gameType : user.getGameModule().getGameTypes()) {
            if ("similarityGame".equals(gameType.getType())) {
                game = (SimilarityGame) gameType.getGames().get(randomGenerator.nextInt(gameType.getGames().size()));
            }
        }

        int i = randomGenerator.nextInt(game.getImages().size());
        correctImage = game.getImages().get(i).getImage();
        correctImagesPanel.add(createGameItem(game.getImages().get(i)));

        //draw the images in a random order
        List<GameImage> tmpImages = new ArrayList<GameImage>(game.getImages());
        while (!tmpImages.isEmpty()) {
            i = randomGenerator.nextInt(tmpImages.size());
            JPanel panel = createGameItem(tmpImages.get(i));
            imagesPanel.add(panel);
            panelList.add(panel);
            tmpImages.remove(i);
        }

        mainPanel.add(correctImagesPanel);
        mainPanel.add(Box.createRigidArea(new Dimension(100, 0)));
        mainPanel.add(imagesPanel);
        mainPanel.revalidate();
        mainPanel.repaint();
        parent.add(mainPanel);
        parent.revalidate();
        parent.repaint();
        setTimer();
    }

    private JPanel createGameItem(final GameImage image) {
        final JPanel panel = guiHelper.createImagePanel(image.getImage(), "", parent);

        panel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Sensor sensor = new MouseSensor(evt.getButton(), evt.getClickCount(), "mouse");

                if (sensorService.shouldSelect(sensor)) {
                    for (int i = 0; i < game.getImages().size(); i++) {
                        if (game.getImages().get(i).getImage().equals(image.getImage()) && game.getImages().get(i).getImage().equals(correctImage)) {
                            timer.cancel();
                            endGame = true;
                            congratulate();
                        } else if (game.getImages().get(i).getImage().equals(image.getImage()) && !game.getImages().get(i).getImage().equals(correctImage)) {
                            timer.cancel();
                            audioPlayer.getMediaPlayer().playMedia(game.getErrorSound());
                        }
                    }
                }
            }
        });

        panel.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent evt) {
                Sensor sensor = new KeyboardSensor(evt.getKeyCode(), evt.getKeyChar(), "keyboard");
                if (sensorService.shouldSelect(sensor)) {
                    // clickedImage = gameType.getType();
                    audioPlayer.getMediaPlayer().playMedia(user.getEntertainmentModule().getMusicModule().getSound());
                }
            }
        });

        return panel;
    }

    private void congratulate() {
        audioPlayer.getMediaPlayer().playMedia(game.getWinSound());

        JPanel nextGame = guiHelper.createResourceImagePanel((new ImageIcon(getClass().getResource("/org/scify/talkandplay/resources/more-icon.png"))), "Επόμενο παιχνίδι", parent);
        JPanel back = guiHelper.createResourceImagePanel((new ImageIcon(getClass().getResource("/org/scify/talkandplay/resources/back-icon.png"))), "Πίσω", parent);

        nextGame.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Sensor sensor = new MouseSensor(evt.getButton(), evt.getClickCount(), "mouse");
                if (sensorService.shouldSelect(sensor)) {
                    parent.remove(mainPanel);
                    SimilarityGamePanel gamePanel = new SimilarityGamePanel(user, parent);
                }
            }
        });
        nextGame.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent evt) {
                Sensor sensor = new KeyboardSensor(evt.getKeyCode(), evt.getKeyChar(), "keyboard");
                if (sensorService.shouldSelect(sensor)) {
                    parent.remove(mainPanel);
                    SimilarityGamePanel gamePanel = new SimilarityGamePanel(user, parent);
                }
            }
        });

        back.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Sensor sensor = new MouseSensor(evt.getButton(), evt.getClickCount(), "mouse");
                if (sensorService.shouldSelect(sensor)) {
                    parent.remove(mainPanel);
                    GamesPanel gamesPanel = new GamesPanel(user, parent);
                }
            }
        });
        back.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent evt) {
                Sensor sensor = new KeyboardSensor(evt.getKeyCode(), evt.getKeyChar(), "keyboard");
                if (sensorService.shouldSelect(sensor)) {
                    parent.remove(mainPanel);
                    GamesPanel gamesPanel = new GamesPanel(user, parent);
                }
            }
        });

        mainPanel.removeAll();
        mainPanel.add(nextGame);
        mainPanel.add(back);
        panelList = new ArrayList();

        panelList.add(nextGame);
        panelList.add(back);

        setTimer();
    }

    private void setTimer() {
        timer = new Timer();
        timer.schedule(new TimerTask() {
            @Override
            public void run() {
                panelList.get(selectedImage).requestFocusInWindow();
                if (selectedImage == 0 && selectedImage != panelList.size() - 1) {
                    panelList.get(panelList.size() - 1).setBorder(null);
                    panelList.get(selectedImage).setBorder(BorderFactory.createLineBorder(Color.BLUE, BORDER_SIZE));
                    selectedImage++;
                } else if (selectedImage == 0 && selectedImage == panelList.size() - 1) {
                    panelList.get(selectedImage).setBorder(BorderFactory.createLineBorder(Color.BLUE, BORDER_SIZE));
                } else if (selectedImage == panelList.size() - 1) {
                    panelList.get(selectedImage - 1).setBorder(null);
                    panelList.get(selectedImage).setBorder(BorderFactory.createLineBorder(Color.BLUE, BORDER_SIZE));
                    selectedImage = 0;
                } else if (selectedImage < panelList.size() - 1 && selectedImage > 0) {
                    panelList.get(selectedImage - 1).setBorder(null);
                    panelList.get(selectedImage).setBorder(BorderFactory.createLineBorder(Color.BLUE, BORDER_SIZE));
                    selectedImage++;
                }
            }
        }, user.getConfiguration().getRotationSpeed() * 1000, user.getConfiguration().getRotationSpeed() * 1000);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
